# WebGL object types
from typing import Any, Sequence

class WebGLShader: ...
class WebGLProgram: ...
class WebGLBuffer: ...
class WebGLTexture: ...
class WebGLFramebuffer: ...
class WebGLRenderbuffer: ...
class WebGLUniformLocation: ...
class WebGLActiveInfo: ...
class WebGLQuery: ...
class WebGLSampler: ...
class WebGLSync: ...
class WebGLTransformFeedback: ...
class WebGLVertexArrayObject: ...

class WebGLRenderingContext:
    # --- Texture State ---
    def activeTexture(self, texture: int) -> None: ...

    # --- Shader Functions ---
    def createShader(self, shaderType: int) -> WebGLShader | None: ...
    def shaderSource(self, shader: WebGLShader, source: str) -> None: ...
    def compileShader(self, shader: WebGLShader) -> None: ...
    def getShaderParameter(self, shader: WebGLShader, pname: int) -> Any: ...
    def getShaderInfoLog(self, shader: WebGLShader) -> str: ...
    def getShaderSource(self, shader: WebGLShader) -> str: ...
    def deleteShader(self, shader: WebGLShader | None) -> None: ...

    # --- Program Functions ---
    def createProgram(self) -> WebGLProgram | None: ...
    def attachShader(self, program: WebGLProgram, shader: WebGLShader) -> None: ...
    def detachShader(self, program: WebGLProgram, shader: WebGLShader) -> None: ...
    def linkProgram(self, program: WebGLProgram) -> None: ...
    def useProgram(self, program: WebGLProgram | None) -> None: ...
    def getProgramParameter(self, program: WebGLProgram, pname: int) -> Any: ...
    def getProgramInfoLog(self, program: WebGLProgram) -> str: ...
    def getAttachedShaders(self, program: WebGLProgram) -> list[WebGLShader]: ...
    def getActiveAttrib(self, program: WebGLProgram, index: int) -> WebGLActiveInfo | None: ...
    def getActiveUniform(self, program: WebGLProgram, index: int) -> WebGLActiveInfo | None: ...
    def getUniformLocation(self, program: WebGLProgram, name: str) -> WebGLUniformLocation | None: ...
    def getUniform(self, program: WebGLProgram, location: WebGLUniformLocation) -> Any: ...
    def deleteProgram(self, program: WebGLProgram | None) -> None: ...

    # --- Buffer Functions ---
    def createBuffer(self) -> WebGLBuffer | None: ...
    def bindBuffer(self, target: int, buffer: WebGLBuffer | None) -> None: ...
    def bufferData(self, target: int, data: int | bytes | Sequence[float] | memoryview, usage: int) -> None: ...
    def bufferSubData(self, target: int, offset: int, data: bytes | Sequence[float] | memoryview) -> None: ...
    def deleteBuffer(self, buffer: WebGLBuffer | None) -> None: ...
    def getBufferParameter(self, target: int, pname: int) -> Any: ...

    # --- Texture Functions ---
    def createTexture(self) -> WebGLTexture | None: ...
    def bindTexture(self, target: int, texture: WebGLTexture | None) -> None: ...
    def texImage2D(
        self, target: int, level: int, internalformat: int,
        width: int, height: int, border: int,
        format: int, type: int, pixels: bytes | memoryview | None = None
    ) -> None: ...
    def texImage2D(
        self, target: int, level: int, internalformat: int,
        format: int, type: int, source: Any
    ) -> None: ...  # Overload for image sources
    def texSubImage2D(
        self, target: int, level: int, xoffset: int, yoffset: int,
        width: int, height: int, format: int, type: int,
        pixels: bytes | memoryview | None = None
    ) -> None: ...
    def texSubImage2D(
        self, target: int, level: int, xoffset: int, yoffset: int,
        format: int, type: int, source: Any
    ) -> None: ...  # Overload for image sources
    def texParameterf(self, target: int, pname: int, param: float) -> None: ...
    def texParameteri(self, target: int, pname: int, param: int) -> None: ...
    def compressedTexImage2D(
            self, target: int, level: int, internalformat: int,
            width: int, height: int, border: int, pixels: bytes | memoryview | None = None
    ) -> None: ...
    def generateMipmap(self, target: int) -> None: ...
    def deleteTexture(self, texture: WebGLTexture | None) -> None: ...
    def getTexParameter(self, target: int, pname: int) -> Any: ...

    # --- Renderbuffer Functions ---
    def createRenderbuffer(self) -> WebGLRenderbuffer | None: ...
    def bindRenderbuffer(self, target: int, renderbuffer: WebGLRenderbuffer | None) -> None: ...
    def renderbufferStorage(self, target: int, internalformat: int, width: int, height: int) -> None: ...
    def deleteRenderbuffer(self, renderbuffer: WebGLRenderbuffer | None) -> None: ...
    def getRenderbufferParameter(self, target: int, pname: int) -> Any: ...

    # --- Framebuffer Functions ---
    def createFramebuffer(self) -> WebGLFramebuffer | None: ...
    def bindFramebuffer(self, target: int, framebuffer: WebGLFramebuffer | None) -> None: ...
    def framebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: WebGLRenderbuffer | None) -> None: ...
    def framebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: WebGLTexture | None, level: int) -> None: ...
    def checkFramebufferStatus(self, target: int) -> int: ...
    def deleteFramebuffer(self, framebuffer: WebGLFramebuffer | None) -> None: ...
    def getFramebufferAttachmentParameter(self, target: int, attachment: int, pname: int) -> Any: ...

    # --- State and Misc Functions ---
    def clear(self, mask: int) -> None: ...
    def clearColor(self, red: float, green: float, blue: float, alpha: float) -> None: ...
    def clearDepth(self, depth: float) -> None: ...
    def clearStencil(self, s: int) -> None: ...
    def colorMask(self, red: bool, green: bool, blue: bool, alpha: bool) -> None: ...
    def cullFace(self, mode: int) -> None: ...
    def depthFunc(self, func: int) -> None: ...
    def depthMask(self, flag: bool) -> None: ...
    def depthRange(self, zNear: float, zFar: float) -> None: ...
    def disable(self, cap: int) -> None: ...
    def enable(self, cap: int) -> None: ...
    def finish(self) -> None: ...
    def flush(self) -> None: ...
    def frontFace(self, mode: int) -> None: ...
    def hint(self, target: int, mode: int) -> None: ...
    def isBuffer(self, buffer: WebGLBuffer) -> bool: ...
    def isContextLost(self) -> bool: ...
    def isEnabled(self, cap: int) -> bool: ...
    def isFramebuffer(self, framebuffer: WebGLFramebuffer) -> bool: ...
    def isProgram(self, program: WebGLProgram) -> bool: ...
    def isRenderbuffer(self, renderbuffer: WebGLRenderbuffer) -> bool: ...
    def isShader(self, shader: WebGLShader) -> bool: ...
    def isTexture(self, texture: WebGLTexture) -> bool: ...
    def lineWidth(self, width: float) -> None: ...
    def pixelStorei(self, pname: int, param: int | bool) -> None: ...
    def polygonOffset(self, factor: float, units: float) -> None: ...
    def readPixels(
        self, x: int, y: int, width: int, height: int,
        format: int, type: int, pixels: bytes | memoryview | None
    ) -> None: ...
    def sampleCoverage(self, value: float, invert: bool) -> None: ...
    def scissor(self, x: int, y: int, width: int, height: int) -> None: ...
    def getError(self) -> int: ...
    def getParameter(self, pname: int) -> Any: ...
    def getContextAttributes(self) -> Any: ...
    def getExtension(self, name: str) -> Any: ...
    def getSupportedExtensions(self) -> list[str] | None: ...

    # --- Vertex Attribute Functions ---
    def enableVertexAttribArray(self, index: int) -> None: ...
    def disableVertexAttribArray(self, index: int) -> None: ...
    def vertexAttrib1f(self, index: int, x: float) -> None: ...
    def vertexAttrib1fv(self, index: int, values: Sequence[float] | memoryview) -> None: ...
    def vertexAttrib2f(self, index: int, x: float, y: float) -> None: ...
    def vertexAttrib2fv(self, index: int, values: Sequence[float] | memoryview) -> None: ...
    def vertexAttrib3f(self, index: int, x: float, y: float, z: float) -> None: ...
    def vertexAttrib3fv(self, index: int, values: Sequence[float] | memoryview) -> None: ...
    def vertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float) -> None: ...
    def vertexAttrib4fv(self, index: int, values: Sequence[float] | memoryview) -> None: ...
    def vertexAttribPointer(self, index: int, size: int, type: int, normalized: bool, stride: int, offset: int) -> None: ...
    def getVertexAttrib(self, index: int, pname: int) -> Any: ...
    def getVertexAttribOffset(self, index: int, pname: int) -> int: ...
    def getAttribLocation(self, program: WebGLProgram, name: str) -> int: ...

    # --- Uniform Functions ---
    def uniform1f(self, location: WebGLUniformLocation, x: float) -> None: ...
    def uniform1fv(self, location: WebGLUniformLocation, v: Sequence[float] | memoryview) -> None: ...
    def uniform1i(self, location: WebGLUniformLocation, x: int) -> None: ...
    def uniform1iv(self, location: WebGLUniformLocation, v: Sequence[int] | memoryview) -> None: ...
    def uniform2f(self, location: WebGLUniformLocation, x: float, y: float) -> None: ...
    def uniform2fv(self, location: WebGLUniformLocation, v: Sequence[float] | memoryview) -> None: ...
    def uniform2i(self, location: WebGLUniformLocation, x: int, y: int) -> None: ...
    def uniform2iv(self, location: WebGLUniformLocation, v: Sequence[int] | memoryview) -> None: ...
    def uniform3f(self, location: WebGLUniformLocation, x: float, y: float, z: float) -> None: ...
    def uniform3fv(self, location: WebGLUniformLocation, v: Sequence[float] | memoryview) -> None: ...
    def uniform3i(self, location: WebGLUniformLocation, x: int, y: int, z: int) -> None: ...
    def uniform3iv(self, location: WebGLUniformLocation, v: Sequence[int] | memoryview) -> None: ...
    def uniform4f(self, location: WebGLUniformLocation, x: float, y: float, z: float, w: float) -> None: ...
    def uniform4fv(self, location: WebGLUniformLocation, v: Sequence[float] | memoryview) -> None: ...
    def uniform4i(self, location: WebGLUniformLocation, x: int, y: int, z: int, w: int) -> None: ...
    def uniform4iv(self, location: WebGLUniformLocation, v: Sequence[int] | memoryview) -> None: ...
    def uniformMatrix2fv(self, location: WebGLUniformLocation, transpose: bool, value: Sequence[float] | memoryview) -> None: ...
    def uniformMatrix3fv(self, location: WebGLUniformLocation, transpose: bool, value: Sequence[float] | memoryview) -> None: ...
    def uniformMatrix4fv(self, location: WebGLUniformLocation, transpose: bool, value: Sequence[float] | memoryview) -> None: ...
    def validateProgram(self, program: WebGLProgram) -> None: ...

    # --- Viewport ---
    def viewport(self, x: int, y: int, width: int, height: int) -> None: ...
    def drawArrays(self, mode: int, first: int, count: int) -> None: ...
    def drawElements(self, mode: int, count: int, type: int, offset: int) -> None: ...



class WebGL2RenderingContext(WebGLRenderingContext):
    def beginQuery(self, target: int, query: WebGLQuery) -> None: ...
    def beginTransformFeedback(self) -> None: ...
    def bindBufferBase(self, target: int, index: int, buffer: WebGLBuffer | None) -> None: ...
    def bindBufferRange(self, target: int, index: int, buffer: WebGLBuffer | None, offset: int, size: int) -> None: ...
    def bindSampler(self, unit: int, sampler: WebGLSampler | None) -> None: ...
    def bindTransformFeedback(self, target: int, transformFeedback: WebGLTransformFeedback | None) -> None: ...
    def bindVertexArray(self, array: WebGLVertexArrayObject | None) -> None: ...
    def blitFramebuffer(
        self, srcX0: int, srcY0: int, srcX1: int, srcY1: int,
        dstX0: int, dstY0: int, dstX1: int, dstY1: int,
        mask: int, filter: int
    ) -> None: ...
    def clearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int) -> None: ...
    def clearBufferfv(self, buffer: int, drawbuffer: int, values: Sequence[float] | memoryview) -> None: ...
    def clearBufferiv(self, buffer: int, drawbuffer: int, values: Sequence[int] | memoryview) -> None: ...
    def clearBufferuiv(self, buffer: int, drawbuffer: int, values: Sequence[int] | memoryview) -> None: ...
    def clientWaitSync(self, sync: WebGLSync, flags: int, timeout: int) -> int: ...
    def texStorage2D(self, target: int, levels: int, internalformat: int, width: int, height: int) -> None: ...
    def compressedTexImage3D(
        self, target: int, level: int, internalformat: int,
        width: int, height: int, depth: int, border: int,
        imageSize: int, data: bytes | memoryview | None
    ) -> None: ...
    def compressedTexSubImage3D(
        self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int,
        width: int, height: int, depth: int, format: int,
        imageSize: int, data: bytes | memoryview | None
    ) -> None: ...
    def copyBufferSubData(self, readTarget: int, writeTarget: int, readOffset: int, writeOffset: int, size: int) -> None: ...
    def copyTexSubImage3D(
        self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int,
        x: int, y: int, width: int, height: int
    ) -> None: ...
    def createQuery(self) -> WebGLQuery | None: ...
    def deleteQuery(self, query: WebGLQuery | None) -> None: ...
    def getQuery(self, target: int, pname: int) -> WebGLQuery | None: ...
    def getQueryParameter(self, query: WebGLQuery, pname: int) -> Any: ...
    def createSampler(self) -> WebGLSampler | None: ...
    def deleteSampler(self, sampler: WebGLSampler | None) -> None: ...
    def getSamplerParameter(self, sampler: WebGLSampler, pname: int) -> Any: ...
    def createSync(self, condition: int, flags: int) -> WebGLSync | None: ...
    def deleteSync(self, sync: WebGLSync | None) -> None: ...
    def getSyncParameter(self, sync: WebGLSync, pname: int) -> Any: ...
    def fenceSync(self, condition: int, flags: int) -> WebGLSync | None: ...
    def createTransformFeedback(self) -> WebGLTransformFeedback | None: ...
    def deleteTransformFeedback(self, transformFeedback: WebGLTransformFeedback | None) -> None: ...
    def createVertexArray(self) -> WebGLVertexArrayObject | None: ...
    def deleteVertexArray(self, array: WebGLVertexArrayObject | None) -> None: ...
    def isQuery(self, query: WebGLQuery) -> bool: ...
    def isSampler(self, sampler: WebGLSampler) -> bool: ...
    def isSync(self, sync: WebGLSync) -> bool: ...
    def isTransformFeedback(self, transformFeedback: WebGLTransformFeedback) -> bool: ...
    def isVertexArray(self, array: WebGLVertexArrayObject) -> bool: ...
    def drawArraysInstanced(self, mode: int, first: int, count: int, instanceCount: int) -> None: ...
    def drawElementsInstanced(self, mode: int, count: int, type: int, offset: int, instanceCount: int) -> None: ...
    def drawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, offset: int) -> None: ...
    def endQuery(self, target: int) -> None: ...
    def endTransformFeedback(self) -> None: ...
    def getBufferSubData(self, target: int, srcByteOffset: int, dstBuffer: bytearray | memoryview) -> None: ...
    def getIndexedParameter(self, target: int, index: int) -> Any: ...
    # --- Uniform Block Functions ---
    def getUniformBlockIndex(self, program: WebGLProgram, uniformBlockName: str) -> int: ...
    def getActiveUniformBlockParameter(self, program: WebGLProgram, uniformBlockIndex: int, pname: int) -> Any: ...
    def getActiveUniformBlockName(self, program: WebGLProgram, uniformBlockIndex: int) -> str: ...
    def uniformBlockBinding(self, program: WebGLProgram, uniformBlockIndex: int, uniformBlockBinding: int) -> None: ...

    # --- Blending Functions ---
    def blendColor(self, red: float, green: float, blue: float, alpha: float) -> None: ...
    def blendEquation(self, mode: int) -> None: ...
    def blendEquationSeparate(self, modeRGB: int, modeAlpha: int) -> None: ...
    def blendFunc(self, sfactor: int, dfactor: int) -> None: ...
    def blendFuncSeparate(self, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int) -> None: ...

    # --- Additional WebGL2 Functions ---
    def getFragDataLocation(self, program: WebGLProgram, name: str) -> int: ...
    def drawBuffers(self, buffers: Sequence[int]) -> None: ...
    def uniform1ui(self, location: WebGLUniformLocation, v0: int) -> None: ...
    def uniform1uiv(self, location: WebGLUniformLocation, v: Sequence[int] | memoryview) -> None: ...
    def uniform2ui(self, location: WebGLUniformLocation, v0: int, v1: int) -> None: ...
    def uniform2uiv(self, location: WebGLUniformLocation, v: Sequence[int] | memoryview) -> None: ...
    def uniform3ui(self, location: WebGLUniformLocation, v0: int, v1: int, v2: int) -> None: ...
    def uniform3uiv(self, location: WebGLUniformLocation, v: Sequence[int] | memoryview) -> None: ...
    def uniform4ui(self, location: WebGLUniformLocation, v0: int, v1: int, v2: int, v3: int) -> None: ...
    def uniform4uiv(self, location: WebGLUniformLocation, v: Sequence[int] | memoryview) -> None: ...
    def vertexAttribDivisor(self, index: int, divisor: int) -> None: ...
    def waitSync(self, sync: WebGLSync, flags: int, timeout: int) -> int: ...